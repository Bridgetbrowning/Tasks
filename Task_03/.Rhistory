paste("Programming", "is", "fun!")
skip()
telegram("START Good morning STOP")
submit()
skip()
mad_libs
mad_libs(today where, students took to the streets in protest of the new, being installed on campus)
mad_libs(place, adjective, and noun)
skip()
%p% <- function("Good" "Job")
skip()
!@# <- function("I", "love", "R!")
%p%
skip()
data(cars)
help(cars)
Runhead(cars)
head(cars)
plot(cars)
help(plot)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x-axis "Speed")
plot(label x=Speed)
skip()
plot(x = cars$speed, y = cars$dist, ylab ="Stopping Distance")
skip()
plot(carsmain= "My Plot")
skip()
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2, color(red))
skip()
plot(xlim = c(10,15))
skip()
plot(cars, pch =2)
date.frame(mtcars)
data.frame(mtcars)
data(mtcars)
help("boxplot")
?boxplot
boxplot(=mpg~cyl,=mtcars)
skip()
hist(c(mtcars$mpg))
hist(mtcars$mpg)
dev.off
setwd("C:\\Users\\bdb00009\\Desktop\\Evolution\\Tasks\\Task_03")
setwd("C:\\Users\\bdb00009\\Desktop\\Evolution\\Tasks\\Task_03")
5
A <- 5
A * 2
B <- c(A, 5, 5)
B
B * 2
''
'B' * 2
B <- c(B, 6, 10)
B <- c(A, 6, 10)
B * 2
C <- c(B, 6, 10)
C * 6
D <- c(1, 5, 10, 15, 20)
sum(D)
mean(D)
min(D)
E <- c(6, 7, 8, 9, 10)
which (E == 8)
which (E > 8)
E[which (E > 8)]
trueMean1 <- 5
trueSD1 <- 5
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean2 <- 4
population2 <- rnorm(1e6, trueMean2, trueSD2)
trueSD2 <- 5
population2 <- rnorm(1e6, trueMean2, trueSD2)
Size <- 50
Sample1 <- sample(population1 , Size)
Sample2 <- sample(population2 , Size)
boxplot(Sample1, Sample2)
individual1 <- c("B" , "A")
individual2 <- c("A" , "A")
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet <- c()
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet [i] <- Gam1 == Gam2
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet [i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
}
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet [i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
source("http://jonsmitchel.com/code/simFxn04.R")
source("http://jonsmitchell.com/code/simFxn04.R")
head()
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_da")
PatGrandma <- makeFounder("grandpa_da")
Alan <- makeBaby(PatGrandma, PatGrandpa)
PatGrandpa <- makeFounder("grandpa_da")
Alan <- makeBaby(PatGrandma, PatGrandpa)
pdf("002_massPlot.pdf")
plot(berenAges, berenMass, col='red', pch=19)
setwd("C:\\Users\\bdb00009\\Desktop\\Evolution\\Tasks\\Task_02")
Data1 <- read.csv ("http://jonsmitchell.com/data/beren.csv", stringsAsFactors=F)
Data1
length(Data1)
nrow(Data1)
ncol(Data1)
colnames(Data1)
head(Data1)
Data1[1 ,]
Data1[2 ,]
Data1[1:3 ,]
Data1[1:3 , 4]
Data1[1:5 , 1:3]
Feeds <- which(Data1[,9] == 'bottle')
berenMilk <- Data1[Feeds ,]
head(berenMilk)
Feeds <- which(Data1[, "event"] == 'bottle')
Feeds <- which(Data1$event == 'bottle')
dayID <- apply(Data1 , 1, function(x) paste(x[1:3] , collapse='-'))
dateID <- sapply(dayID , as.Date , format = "%Y-%m-%d" , origin = "2019-04-18")
Data1$age <- dateID - dateID[which(Data1$event == 'birth')]
head(Data1)
beren2 <- Data1
beren3 <- beren2[order(beren2$age) ,]
head(beren2)
head(beren3)
write.csv(beren3 , 'beren_new.csv' , quote=F, row.names=FALSE)
Feeds <- which(beren3$event == "bottle")
aveMilk <- mean(beren3$value[Feeds])
aveFeed <- tapply(beren3$value[Feeds] , beren3$age [Feeds] , mean)
head(aveFeed)
head(Data1)
varFeed <- tapply(beren3$value[Feeds] , beren3$age[Feeds] , var)
totalFeed <- tapply(beren3$value[Feeds] , beren3$age[Feeds] , sum)
numFeeds <- tapply(beren3$value[Feeds] , beren3$value[Feeds] , length)
numFeeds <- tapply(beren3$value[Feeds] , beren3$age[Feeds] , length)
cor(beren3$value[Feeds], beren3$age[Feeds])
cor.test(beren3$value[Feeds] , beren3$age[Feeds])
#berenCor <- cor.test(beren3$value[Feeds])
berenCor <- cor.test(beren3$value[Feeds] , beren3$age[Feeds])
summary(berenCor)
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds] , xlab= "who gave the bottle" , ylab= "amount of milk consumed (oz)")
#par(1as=1, mar=c(5, 5, 1, 1) , mgp=c(2, 0.5, 0) , tck=-0.01)
par(las =1, mar=c(5,5,1,1), mgp=c(2,0.05,0), tck=-0.01)
plot(as.numeric(names(totalFeed)), totalFeed , type="b" , pch=16, xlab="age in days" , ylab="ounces of milk")
abline(h=mean(totalFeed) , lty=2, col='red')
pdf("r02b-totalMilkByDay.pdf" , height = 4, width = 4)
par(las=1, mar=c(5,5,1,1) , mgp=c(2,0.5,0) , tck=-0.01)
plot(as.numeric(names(totalFeed)),totalFeed, type="b", pch=16, xlab="age in days" , ylab="ounces of milk")
abline(h=mean(totalFeed), lty=2, col="red")
dev.off()
source("http://jonsmitchell.com/code/plotFxn02b.R")
#save("r02b-cumulataiveMilkByTime.pdf")
plot(xlab="age of Beren", ylab="mass of Beren")
### this is a comment, R won't read it, it's just for you
### this can help take notes about what code is doing
# read in cyrus data
Data2 <- read.csv ("http://jonsmitchell.com/data/cyrus.csv", stringsAsFactors=F)
# get Cyrus's age
dayID2 <- apply(Data2, 1, function(x) paste(x[1:3], collapse="-"))
dateID2 <- sapply(dayID2, as.Date, format="%Y-%m-%d", origin = "2022-04-12")
Data2$age <- dateID2 - dateID2[which(Data2$event == "birth")]
cMassRows <- which(Data2[, 'event'] == 'trait_mass')
cyrusMass <- Data2[cMassRows, "value"]
cyrusAges <- Data2[cMassRows, "age"]
pdf("002_massPlot.pdf")
plot(berenAges, berenMass, col='red', pch=19)
MassRows <- which(Data1[, 'event'] == 'trait_mass')
berenMass <- Data1[MassRows, "value"]
berenAges <- Data1[MassRows, "age"]
pdf("002_massPlot.pdf")
plot(berenAges, berenMass, col='red', pch=19)
points(cyrusAges, cyrusMass/1000, col='blue', pch=16)
dev.off()
setwd("C:\\Users\\bdb00009\\Desktop\\Evolution\\Tasks\\Task_03")
setwd("C:\\Users\\bdb00009\\Desktop\\Evolution\\Tasks\\Task_03")
5
A <- 5
A * 2
B <- c(A, 5, 5)
B
B * 2
'B' * 2
setwd("C:\\Users\\bdb00009\\Desktop\\Evolution\\Tasks\\Task_03")
setwd("C:\\Users\\bdb00009\\Desktop\\Evolution\\Tasks\\Task_03")
5
A <- 5
A * 2
B <- c(A, 5, 5)
B
B * 2
#'B' * 2
B <- c(A, 6, 10)
B * 2
C <- c(B, 6, 10)
C * 6
D <- c(1, 5, 10, 15, 20)
sum(D)
mean(D)
min(D)
E <- c(6, 7, 8, 9, 10)
which (E == 8)
which (E > 8)
E[which (E > 8)]
trueMean1 <- 5
trueSD1 <- 5
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean2 <- 4
trueSD2 <- 5
population2 <- rnorm(1e6, trueMean2, trueSD2)
Size <- 50
Sample1 <- sample(population1 , Size)
Sample2 <- sample(population2 , Size)
boxplot(Sample1, Sample2)
individual1 <- c("B" , "A")
individual2 <- c("A" , "A")
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet <- c()
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
Alan <- makeBaby(PatGrandma, PatGrandpa)
Brenda <-
''
setwd("C:\\Users\\bdb00009\\Desktop\\Evolution\\Tasks\\Task_03")
setwd("C:\\Users\\bdb00009\\Desktop\\Evolution\\Tasks\\Task_03")
5
A <- 5
A * 2
B <- c(A, 5, 5)
B
B * 2
#'B' * 2
B <- c(A, 6, 10)
B * 2
C <- c(B, 6, 10)
C * 6
D <- c(1, 5, 10, 15, 20)
sum(D)
mean(D)
min(D)
E <- c(6, 7, 8, 9, 10)
which (E == 8)
which (E > 8)
E[which (E > 8)]
trueMean1 <- 5
trueSD1 <- 5
population1 <- rnorm(1e6, trueMean1, trueSD1)
trueMean2 <- 4
trueSD2 <- 5
population2 <- rnorm(1e6, trueMean2, trueSD2)
Size <- 50
Sample1 <- sample(population1 , Size)
Sample2 <- sample(population2 , Size)
boxplot(Sample1, Sample2)
individual1 <- c("B" , "A")
individual2 <- c("A" , "A")
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet <- c()
for (i in 1:100) {
Gam1 <- sample(individual1 , 1)
Gam2 <- sample(individual2 , 1)
newBaby <- c(Gam1, Gam2)
isHet[i] <- Gam1 == Gam2
}
sum(isHet) / length(isHet)
source("http://jonsmitchell.com/code/simFxn04.R")
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
Alan <- makeBaby(PatGrandma, PatGrandpa)
Brenda <-
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Brenda <- makeBaby(MatGrandma, MatGrandpa)
Focus <- makeBaby(Brenda, Alan)
ToMom <- length(grep("mom" , Focus)) / length( Focus )
MatGrandma <- makeFounder("grandma_mom")
MatGrandpa <- makeFounder("grandpa_mom")
PatGrandma <- makeFounder("grandma_da")
PatGrandpa <- makeFounder("grandpa_da")
Alan <- makeBaby(PatGrandma, PatGrandpa)
Focus <- makeBaby(Brenda, Alan)
ToMom <- length(grep("mom" , Focus)) / length( Focus )
ToMomMom <- length( grep("grandma_mom" , Focus)) / lenght( Focus )
ToMomMom <- length(grep("grandma_mom" , Focus)) / lenght( Focus )
ToMomMom <- length(grep)
ToMomMom <- length(grep("grandma_mom", Focus)) / length( Focus )
ToMomDad <- length(grep("grandpa_mom", Focus)) / length( Focus )
Sibling_01 <- makeBaby(Brenda, Alan)
ToSib <- length( intersect( Focus, Sibling_01)) / length( Focus )
ManySiblings <- replicate( 1e3, length( interset( Focus, makeBaby(Brenda, Alan))) / length( Focus ))
ManySiblings <- replicate( 1e3, length( intersect( Focus, makeBaby(Brenda, Alan))) / length( Focus ))
quantile(ManySiblings)
mean(ManySiblings)
pdf()
hist()
hist()
hist(quantile(ManySiblings), mean(ManySiblings))
hist(Focus, ManySiblings)
plot(quantile, mean)
range(Focus, ManySiblings)
plot(range(Focus), range(ManySiblings))
hist(x(range(Focus), y(range(ManySiblings) , xlabel(loci), ylabel(frequency))))
plot(Focus, ManySiblings)
